1558732085
a:2:{s:7:"content";s:3299:"<h1>Quickstart</h1>
<p>This Quick Start guide will take you through the minimum required steps to begin making API requests. By the end of this guide, you’ll be able to retrieve a store’s product catalog, create a new product, and troubleshoot common errors.</p>
<p>Before we begin, here are a few key concepts:</p>
<ul>
<li>API requests are always made against a single store’s data, and API tokens are issued on a per-store basis. The first step to using the BigCommerce API is creating a BigCommerce store.</li>
<li>API Credentials can be generated from a store’s control panel. If you’re testing requests or writing a script for a single store, start here to quickly get your token and begin making API calls.</li>
<li>If you’re building an app that will install in a store’s control panel, you’ll need to generate an API token programmatically during the app installation process. However in the beginning, it’s still a good idea to generate API credentials from the control panel to start testing requests with minimal effort.</li>
</ul>
<hr>
<h2 id="prerequisites">Prerequisites</h2>
<ul>
<li><a href="https://developer.bigcommerce.com/api-docs/getting-started/authentication#authentication_getting-api-credentials">API Credentials</a></li>
<li>Scope set to <a href="https://developer.bigcommerce.com/api-docs/getting-started/authentication#authentication_oauth-scopes">Products Modify</a></li>
<li>BigCommerce Store (<code>store_hash</code>)</li>
</ul>
<div class="notices blue">
<p>You can use any API client (like HTTPie) for this walkthrough, but these steps are written with Postman in mind.</p>
</div>
<pre><code class="language-php">        &lt;?php
        namespace Grav\Plugin;

        use \Grav\Common\Plugin;
        use \Grav\Common\Grav;
        use \Grav\Common\Page\Page;

        class PrismHighlightPlugin extends Plugin
        {
            /**
            * @return array
            */
            public static function getSubscribedEvents()
            {
                return [
                    'onPageInitialized' =&gt; ['onPageInitialized', 0],
                    'onShortcodeHandlers' =&gt; ['onShortcodeHandlers', 0],
                    'onTwigTemplatePaths' =&gt; ['onTwigTemplatePaths', 0],
                ];
            }
        }</code></pre>
<p><a href="/storefront-cart-checkout/">https://github.com/getgrav/grav-plugin-highlight</a>
https://github.com/StellarisStudio/grav-plugin-markdown-clipboard
https://github.com/team-grav/grav-plugin-page-toc</p>
<p>Working with the Storefront APIs
On This Page
Prerequisites
Create postData() Function
Storefront Cart
Storefront Checkout
Troubleshooting
Related Endpoints
Prerequisites:
Chrome/Firefox/Safari - Fetch does not work every version of Internet Explorer. We recommend installing a polyfill, then use fetch as usual.
BigCommerce Store with at least two products and a shipping option available.
Familiar with browser developer console
This tutorial reviews the Fetch API and then uses it to complete some storefront actions.</p>
<p>Interaction with the Storefront APIs should be done using JavaScript. The Storefront APIs do not require API Tokens to work. The URL should be served over https and be on the permanent URL; otherwise, it can cause CORs errors in the console.</p>";s:12:"content_meta";N;}